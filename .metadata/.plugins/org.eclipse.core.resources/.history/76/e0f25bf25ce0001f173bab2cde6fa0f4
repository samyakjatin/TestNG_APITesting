package admin;

import java.io.File;

import org.junit.Test;
import org.testng.Assert;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import utils.BaseTest;
import utils.Constant;


public class AutoBiddingController extends BaseTest {
	

	@org.testng.annotations.Test
	public void Test01AutoBidsAuctionId() {

		// Set the base URI
		RestAssured.baseURI = "http://localhost:8080/api/v1";
		RequestSpecification request = RestAssured.given();

		String encryptedCredentials = Constant.adminCredentials; 

		request.body(encryptedCredentials);
		
		// Add Authorization header for Bearer Token Authentication
		String token = Constant.authToken;
		request.header("Authorization", "Bearer " + token); // Add Bearer token in Authorization header

		// Specify the auctionId as a path parameter
		String auctionId = "693c945d-da0a-4e41-b93a-081e0f033662";
		request.pathParam("auctionId", auctionId);

		// Send the GET request
		Response response = request.get("/auto-bids/{auctionId}");

		// Print the response status and body for debugging
		System.out.println("The status received: " + response.statusLine());
		System.out.println("Response: " + response.getBody().asString());

		int statusCode = response.getStatusCode();
		System.out.println("Status Code: " + statusCode);

		// Check if the status code is 200 (OK)
		switch (statusCode) {
		case 200:
			System.out.println("Request succeeded: Slot details retrieved successfully.");
			break;
		case 403:
			System.out.println("Forbidden: Access is denied.");
			break;
		case 404:
			System.out.println("Not Found: The specified resource was not found.");
			break;
		case 500:
			System.out.println("Internal Server Error: The server encountered an unexpected condition.");
			break;
		default:
			System.out.println("Unexpected status code: " + statusCode);
		}

		// Assert that the status code is 200 (OK)
		Assert.assertEquals(statusCode, 200, "Expected 200 OK, but got: " + statusCode);
	}
	
	@org.testng.annotations.Test
	
	public void Test02AutoBidExcel() {

	    // Set the base URI
	    RestAssured.baseURI = "http://localhost:8080/api/v1";
	    RequestSpecification request = RestAssured.given();

	    // Add Authorization header for Bearer Token Authentication
	    String token = Constant.authToken;
	    request.header("Authorization", "Bearer " + token); 

	    // Specify the auctionId as a path parameter
	    String auctionId = "3fa85f64-5717-4562-b3fc-2c963f66afa6";
	    request.pathParam("auctionId", auctionId);

	    // Set Content-Type to multipart/form-data
	    request.contentType("multipart/form-data");

	    // Provide the path of the Excel file to upload
	    File excelFile = new File("C:\\Users\\ESAMYAK121\\Desktop\\Testing\\AutoBid_Excel_Upload.xlsx");

	    // Attach the Excel file
	    request.multiPart("file", excelFile);

	    // Send the PUT request with file upload
	    Response response = request.put("/autoBid/excel/{auctionId}");

	    // Print the response status and body for debugging
	    System.out.println("The status received: " + response.statusLine());
	    System.out.println("Response: " + response.getBody().asString());

	    int statusCode = response.getStatusCode();
	    System.out.println("Status Code: " + statusCode);

	    // Check response status
	    switch (statusCode) {
	        case 200:
	            System.out.println("Request succeeded: Excel file uploaded successfully.");
	            break;
	        case 400:
	            System.out.println("Bad Request: Please check the file format.");
	            break;
	        case 403:
	            System.out.println("Forbidden: Access is denied.");
	            break;
	        case 404:
	            System.out.println("Not Found: The specified resource was not found.");
	            break;
	        case 500:
	            System.out.println("Internal Server Error: The server encountered an unexpected condition.");
	            break;
	        default:
	            System.out.println("Unexpected status code: " + statusCode);
	    }

	    // Assert that the status code is 200 (OK)
	    Assert.assertEquals(statusCode, 200, "Expected 200 OK, but got: " + statusCode);
	}
	

}
